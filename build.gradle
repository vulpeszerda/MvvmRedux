// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        kotlin = "1.1.50"
        androidPlugin = "2.3.3"
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidPlugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin"
        classpath 'com.google.gms:google-services:3.1.0'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.3'
    }
}

allprojects {
    project.ext {
        kotlin = kotlin

        compileSdk = 26
        targetSdk = 26
        minSdk = 15
        buildTools = "25.0.3"

        supportLib = "26.0.0"
        googlePlay = "11.2.0"
        constraintLayout = "1.0.2"

        junit = "4.12"
        espresso = "3.0.0"

        rxjava2 = "2.1.3"
        rxandroid2 = "2.0.1"
        rxkotlin2 = "2.1.0"
        rxbinding2 = "2.0.0"
        rxlifecycle2 = "2.1.0"
        rxpermissions2 = "0.9.4@aar"
        rxpreferences2 = "2.0.0-RC3"

        androidArch = "1.0.0-alpha9"
        room = androidArch

        java7Home = project.hasProperty("java7_home") ?
                project.property("java7_home") : System.getenv("JAVA7_HOME")
        java8Home = project.hasProperty("java8_home") ?
                project.property("java8_home") : System.getenv("JAVA8_HOME")
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.google.com' }
        maven { url "https://jitpack.io" }
    }
}

if (java7Home == null) {
    throw new GradleException("Required JAVA7_HOME environment variable not set.")
}
if (java8Home == null) {
    throw new GradleException("Required JAVA8_HOME environment variable not set.")
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin" == plugin.class.name) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin" == plugin.class.name) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
